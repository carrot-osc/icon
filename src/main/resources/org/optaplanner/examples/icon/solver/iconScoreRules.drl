package org.optaplanner.examples.icon;

import java.util.Set;
import java.math.BigDecimal;

import org.optaplanner.core.api.score.buildin.hardsoftbigdecimal.HardSoftBigDecimalScoreHolder;
import org.optaplanner.examples.icon.domain.Resource;
import org.optaplanner.examples.icon.domain.Task;
import org.optaplanner.examples.icon.domain.Machine;
import org.optaplanner.examples.icon.domain.Period;
import org.optaplanner.examples.icon.domain.PeriodPowerCost;

global HardSoftBigDecimalScoreHolder scoreHolder;

// hard constraints

rule "Unassigned tasks"
when
    $t: Task(startPeriod == null)
then
    scoreHolder.addHardConstraintMatch(kcontext, BigDecimal.valueOf(-1000000));
end

rule "Unscheduled tasks"
when
    $t: Task(executor == null)
then
    scoreHolder.addHardConstraintMatch(kcontext, BigDecimal.valueOf(-1000000));
end

rule "Resource utilization; incredible performance bottleneck"
when
    $p: Period()
    $m: Machine()
    $tasks: Set( size > 0 ) from collect( 
        Task(executor == $m, $p memberOf occupiedPeriods)
    )
    $r: Resource()
    $consumption: Number() from accumulate (
        $t: Task(this memberOf $tasks);
            sum( $t.getResourceConsumption($r))
    )
then
    int capacity = $m.getResourceCapacity($r);
    int numOverreach = Math.min(0, capacity - $consumption.intValue());
    BigDecimal overreach = BigDecimal.valueOf(numOverreach);
    scoreHolder.addHardConstraintMatch(kcontext, overreach);
end

// objective function

rule "Valuate power consumption of tasks"
when
    $t: Task(startPeriod != null, $periods: occupiedPeriods)
    $p: Period(this memberOf $periods)
    $c: PeriodPowerCost(period == $p)
then
    BigDecimal consumption = $t.getPowerConsumption();
    BigDecimal cost =  $c.getCost();
    scoreHolder.addSoftConstraintMatch(kcontext, consumption.multiply(cost).negate());
end

rule "Score startup and shutdowns of machines that are occupied at least once"
when
    $m: Machine()
    exists Task(executor == $m)
then
    // FIXME needs to be replaced by actual tracking and planning of idle times and shutdowns
    scoreHolder.addSoftConstraintMatch(kcontext, $m.getCostOnStartup().negate());
    scoreHolder.addSoftConstraintMatch(kcontext, $m.getCostOnShutdown().negate());
end