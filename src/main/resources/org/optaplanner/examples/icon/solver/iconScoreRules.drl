package org.optaplanner.examples.icon;

import java.util.Set;
import java.math.BigDecimal;
import java.math.RoundingMode;

import org.optaplanner.core.api.score.buildin.hardsoftbigdecimal.HardSoftBigDecimalScoreHolder;
import org.optaplanner.examples.icon.domain.Resource;
import org.optaplanner.examples.icon.domain.Task;
import org.optaplanner.examples.icon.domain.Machine;
import org.optaplanner.examples.icon.domain.MachineCapacity;
import org.optaplanner.examples.icon.domain.Period;
import org.optaplanner.examples.icon.domain.PeriodPowerCost;

import accumulate org.optaplanner.examples.icon.util.BigDecimalSumAccumulateFunction sumbd;

global HardSoftBigDecimalScoreHolder scoreHolder;
global BigDecimal costMultiplier;

// ################ declared types ########################

declare MachineActivated
    machine: Machine
    on: Period
end

declare MachineDeactivated
    machine: Machine
    after: Period
    shutdown: boolean
end

declare ActiveMachine
    during: Period
    machine: Machine
end

// ################# shared stuff ###########################

rule "Determine cost multiplier"
salience 1000 // run absolute first
when
    $total: Set() from collect(
        Period()
    )
then
    BigDecimal minutesInDay = BigDecimal.valueOf(1440);
    BigDecimal numOfPeriods = BigDecimal.valueOf($total.size());
    BigDecimal resolution = minutesInDay.divide(numOfPeriods); // minutes per period
    BigDecimal sixty = BigDecimal.valueOf(60); // hours per period
    drools.getWorkingMemory().setGlobal("costMultiplier", resolution.divide(sixty, 3, RoundingMode.HALF_UP));
end

rule "Is Machine active at a given time?"
salience 900 // reused by most other rules; run near first
when
    $m: Machine()
    $p: Period()
    exists Task(executor == $m, $p >= startPeriod, $p <= finalPeriod)
then
    insertLogical(new ActiveMachine($p, $m));
end

// ################# hard constraints ###########################

rule "Resource overuse per machine per period"
when
    ActiveMachine($p: during, $m: machine)
    MachineCapacity(machine == $m, $r: resource, $capacity: capacity)
    $use: Number(intValue > $capacity) from accumulate (
        $t: Task(
            isInitialized(),
            executor == $m,
            $p >= startPeriod,
            $p <= finalPeriod
        );
        sum( $t.getConsumption($r).getConsumption() )
    )
then
    scoreHolder.addHardConstraintMatch(kcontext, BigDecimal.valueOf($use.intValue() - $capacity).negate());
end

// ################# objective function ###########################

rule "Calculate costs for task power consumption, per task"
when
    $task: Task(isInitialized(), $start: startPeriod, $end: finalPeriod)
    $cost: BigDecimal() from accumulate(
        PeriodPowerCost(period >= $start, period <= $end, $partial: cost);
        sumbd( $partial )
    )
then
    BigDecimal costPerTask = $cost.multiply($task.getPowerConsumption());
    BigDecimal adjustedCost = costPerTask.multiply(costMultiplier);
    scoreHolder.addSoftConstraintMatch(kcontext, adjustedCost.negate());
end

rule "Detect machine becoming active"
salience 200 // run before shutdown detection
when
    ActiveMachine($p: during, $m: machine)
    not ActiveMachine(machine == $m, during.id == $p.id - 1) 
then
    insertLogical(new MachineActivated($m, $p));
end

rule "Detect machine becoming inactive"
salience 200 // run before shutdown detection
when
    ActiveMachine($p: during, $m: machine)
    not ActiveMachine(machine == $m, during.id == $p.id + 1) 
then
    insertLogical(new MachineDeactivated($m, $p, false));
end

rule "Detect if the inactivity is in fact a shutdown"
salience 100 // run before all startup/shutdown/idle penalties are calculated
when
    $e: MachineDeactivated($m: machine, $p: after, !shutdown)
    exists Task(finalPeriod == $p, executor == $m, shutdownPossible)
then
    modify ($e) {
        setShutdown(true);
    }
end

rule "Penalize idle runtime"
when
    MachineDeactivated(!shutdown, $m: machine, $deactivation: after)
    MachineActivated(machine == $m, on > $deactivation, $activation: on)
    not MachineActivated(machine == $m, on > $deactivation, on < $activation) // find immediate next activation
    $cost: BigDecimal() from accumulate(
        PeriodPowerCost(period > $deactivation, period < $activation, $partial: cost);
        sumbd( $partial )
    )
then
    scoreHolder.addSoftConstraintMatch(kcontext, 
        $m.getCostWhenIdle().multiply($cost).multiply(costMultiplier).negate()
    );
end

rule "Penalize shutdowns"
when
    MachineDeactivated($m: machine, shutdown)
then
    scoreHolder.addSoftConstraintMatch(kcontext, $m.getCostOnShutdown().negate());
end

rule "Penalize first startup"
when
    MachineActivated($m: machine, $activation: on)
    not MachineDeactivated(machine == $m, after < $activation)
then
    scoreHolder.addSoftConstraintMatch(kcontext, $m.getCostOnStartup().negate());
end

rule "Penalize subsequent startups, excluding idle"
when
    MachineActivated($m: machine, $activation: on)
    MachineDeactivated(shutdown, machine == $m, after < $activation, $latestShutdown: after)
    not MachineDeactivated(machine == $m, after < $activation, after > $latestShutdown) // find immediate previous deactivation
then
    scoreHolder.addSoftConstraintMatch(kcontext, $m.getCostOnStartup().negate());
end