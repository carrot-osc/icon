package org.optaplanner.examples.icon;

import java.util.Set;
import java.math.BigDecimal;

import org.optaplanner.core.api.score.buildin.hardsoftbigdecimal.HardSoftBigDecimalScoreHolder;
import org.optaplanner.examples.icon.domain.Resource;
import org.optaplanner.examples.icon.domain.Task;
import org.optaplanner.examples.icon.domain.Machine;
import org.optaplanner.examples.icon.domain.Period;
import org.optaplanner.examples.icon.domain.PeriodPowerCost;

import accumulate org.optaplanner.examples.icon.util.BigDecimalSumAccumulateFunction sumbd;

global HardSoftBigDecimalScoreHolder scoreHolder;

// hard constraints
rule "Resource utilization; incredible performance bottleneck"
when
    $p: Period()
    $m: Machine()
    $tasks: Set( size > 0 ) from collect( 
        Task(executor == $m, $p memberOf occupiedPeriods)
    )
    $r: Resource()
    $consumption: Number(intValue > 0) from accumulate (
        $t: Task(this memberOf $tasks);
            sum( $t.getResourceConsumption($r))
    )
then
    int capacity = $m.getResourceCapacity($r);
    int cons = $consumption.intValue();
    int result = Math.min(0, capacity - cons);
    BigDecimal overreach = BigDecimal.valueOf(result);
    scoreHolder.addHardConstraintMatch(kcontext, overreach);
end

// objective function

rule "Calculate costs for task power consumption, period by period"
when
    $p: Period()
    $consumption: BigDecimal(this.compareTo(BigDecimal.ZERO) > 0) from accumulate (
        $t: Task($p memberOf occupiedPeriods);
            sumbd( $t.getPowerConsumption() )
    )
    $cost: PeriodPowerCost(period == $p)
then
    scoreHolder.addSoftConstraintMatch(kcontext, $consumption.multiply($cost.getCost()).negate());
end

rule "For every machine that has a task, we must count one startup and shutdown"
when
    $m: Machine()
    exists Task(executor == $m)
then
    scoreHolder.addSoftConstraintMatch(kcontext, $m.getCostOnStartup().negate());
    scoreHolder.addSoftConstraintMatch(kcontext, $m.getCostOnShutdown().negate());
end